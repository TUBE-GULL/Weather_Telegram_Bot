from aiogram import F,Router
from aiogram.filters import Command
from aiogram.types import Message   
from datetime import datetime, timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger


import app.components.keyboards as kb
from app.components.fun_weather import request_city_API_OpenWeatherMap, request_coordinates_API_OpenWeatherMap
from app.components.command import commands
from app.components.working_db import DataBase


router_weather = Router(name='weather')
db = DataBase()


@router_weather.message(Command('weather'))
async def weather(message: Message):
    lan = message.from_user.language_code
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    city = await db.read_database(message.from_user.id, 'city')
    coordinates = await db.read_database(message.from_user.id, 'coordinates')
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≥–æ—Ä–æ–¥–∞, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    if city is None and coordinates is None:
        await message.answer(commands[lan]['WEATHER'][0])
        await message.answer(commands[lan]['WEATHER'][1])
        # if lan == 'ru':
        await message.answer( 
            reply_markup=kb.weather_coordinates_and_city_keyboard_ru
        )
        # else:
        # await message.answer( 
        #     reply_markup=kb.weather_coordinates_and_city_keyboard_en
        # )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥
        if city != None:
            result = await request_city_API_OpenWeatherMap(city, lan)  # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –∑–∞–ø—Ä–æ—Å
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if lan == 'ru':
                await message.answer(f"–ì–æ—Ä–æ–¥: {city}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
            else:
                await message.answer(f"City: {city}\nDescription: {result['description']}\nTemperature: {result['temp']}¬∞C")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        elif coordinates != None:
            result = await request_coordinates_API_OpenWeatherMap(coordinates)
            print(result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if lan == 'ru':
                await message.answer(f"–ì–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coordinates}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
            else:
                await message.answer(f"City by coordinates: {coordinates}\nDescription: {result['description']}\nTemperature: {result['temp']}¬∞C")


# –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ !
@router_weather.message(lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥  üèô') # –ø–æ–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º 
async def ask_for_city(message:Message):
    lan = message.from_user.language_code
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router_weather.message(lambda message: message.text and message.text != '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è')
async def handle_city_input(message:Message):
    city = message.text
    user_id = message.from_user.id
    
    print(city)
    print(user_id)
    
    # check city through API
    result = await request_city_API_OpenWeatherMap(city)
    print('result:',result)
    
    if result:
        await message.answer(f"–ì–æ—Ä–æ–¥: {result['city']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
        await db.write_database(user_id, city ,'city')
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    
    
    
@router_weather.message(F.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    coordinates = f"{message.location.latitude, message.location.longitude}"
    
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    result = request_coordinates_API_OpenWeatherMap(coordinates)
    print(result)
    if result:
        await db.write_database(user_id, coordinates, 'coordinates')
        await message.answer(f"–ì–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coordinates}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞.")
        
        
        
# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ 


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message_to_user(user_id: int, text: str):
    try:
        await router_weather.send_message(user_id, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def schedule_message(user_id: int, text: str, send_time_utc: datetime):
    scheduler = AsyncIOScheduler()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ UTC)
    trigger = DateTrigger(run_date=send_time_utc)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(send_message_to_user, trigger, args=[user_id, text])

    scheduler.start()

# –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router_weather.message(commands=['set_schedule'])
async def set_schedule(message:Message):
    user_id = message.from_user.id
    text = "–≠—Ç–æ –≤–∞—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    
    # –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤ UTC)
    send_time_utc = datetime.now(timezone.utc).replace(minute=message.text.split()[1], second=0, microsecond=0)  # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    await schedule_message(user_id, text, send_time_utc)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!")