from aiogram import F,Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from datetime import datetime, timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

import app.components.keyboards as kb
from app.components.fun_weather import request_city_API_OpenWeatherMap, request_coordinates_API_OpenWeatherMap
from app.components.command import commands
from app.components.working_db import DataBase

router_weather = Router(name='weather')
db = DataBase()


@router_weather.message(Command('weather'))
async def weather(message: Message):
    lan = message.from_user.language_code
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    city = await db.read_database(message.from_user.id, 'city')
    coordinates = await db.read_database(message.from_user.id, 'coordinates')
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≥–æ—Ä–æ–¥–∞, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    if city is None and coordinates is None:
        await message.answer(commands['ru']['WEATHER'][0])
        # await message.answer(commands[lan]['WEATHER'][1],reply_markup=kb.weather_coordinates_and_city_keyboard_ru)
        # if lan == 'ru':
        await message.answer(commands['ru']['WEATHER'][1],reply_markup=kb.weather_coordinates_and_city_keyboard_ru)
        # else:
        # await message.answer( 
        #     reply_markup=kb.weather_coordinates_and_city_keyboard_en
        # )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥
        if city != None:
            result = await request_city_API_OpenWeatherMap(city, lan)  # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –∑–∞–ø—Ä–æ—Å
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if lan == 'ru':
                await message.answer(f"–ì–æ—Ä–æ–¥: {city}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
            else:
                await message.answer(f"City: {city}\nDescription: {result['description']}\nTemperature: {result['temp']}¬∞C")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        elif coordinates != None:
            result = await request_coordinates_API_OpenWeatherMap(coordinates)
            print(result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if lan == 'ru':
                await message.answer(f"–ì–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coordinates}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
            else:
                await message.answer(f"City by coordinates: {coordinates}\nDescription: {result['description']}\nTemperature: {result['temp']}¬∞C")


# –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ !
@router_weather.message(lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥  üèô') # –ø–æ–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º 
async def ask_for_city(message:Message):
    lan = message.from_user.language_code # –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ 
    await db.write_database(message.from_user.id, 'city', 'question') # –∑–∞–ø–∏—Å—å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤!
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())

 
@router_weather.message(F.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    coordinates = f"{message.location.latitude, message.location.longitude}"
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    result = await request_coordinates_API_OpenWeatherMap(coordinates)
    print(result)
    if result:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.write_database(user_id, coordinates, 'coordinates')
        await message.answer(f"–ì–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {coordinates}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞.")
        

# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ 
@router_weather.message(Command('newsletter'))
async def newsletter(message:Message):

     # print(message)
    local_time = datetime.now()
    print("–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:", local_time)
    print(message.date)
    result = await db.read_database(message.from_user.id,'time_zone')

    # —Ç—É—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–π –≤–æ–ø—Ä–æ—Å 
    if result:
        await message.answer(f"–í–∞—à–µ –≤—Ä–µ–º—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {result}")
    else:
        await message.answer("–ú—ã –Ω–µ –∑–Ω–∞–µ–º –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è?", reply_markup=kb.yes_no_keyboard_ru)

        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
@router_weather.message(lambda message: message.text in ['–î–∞', '–ù–µ—Ç'])
async def handle_yes_no(message: Message):
    if message.text == '–î–∞':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):", reply_markup=ReplyKeyboardRemove())
        await db.write_database(message.from_user.id, 'time' , 'question')# –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ !
    else:
        await message.answer("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–∑–∂–µ.", reply_markup=ReplyKeyboardRemove())




@router_weather.message()
async def handle_weather_input(message:Message):
    question = await db.read_database(message.from_user.id,'question')# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–æ–ø—Ä–æ—Å–∞ 
    print('hi')
   
    if question == 'city':
        city = message.text
        user_id = message.from_user.id 
        print(city)
        print(user_id)
        
        # check city through API
        result = await request_city_API_OpenWeatherMap(city)
        print('result:',result)
        
        if result:
            await message.answer(f"–ì–æ—Ä–æ–¥: {result['city']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {result['temp']}¬∞C")
            await db.write_database(user_id, city ,'city')
            await db.write_database(message.from_user.id, None , 'question')# —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è     
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    
    elif question == 'time':
        user_time = message.text

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
            user_time_obj = datetime.strptime(user_time, '%H:%M').time()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç datetime
            message_time_obj = datetime.fromisoformat(message.date.isoformat())
            message_time_obj = message_time_obj.time()

            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            today = datetime.today().date()
            user_datetime = datetime.combine(today, user_time_obj)
            message_datetime = datetime.combine(today, message_time_obj)

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
            time_difference = user_datetime - message_datetime

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å–∞—Ö –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            difference_in_hours = int(time_difference.total_seconds() // 3600)

            await db.write_database(message.from_user.id, difference_in_hours, 'time_zone')

            await message.answer(f"–í–∞—à–µ –≤—Ä–µ–º—è ({user_time}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            await db.write_database(message.from_user.id, None , 'question') # —Å–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ 
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message_to_user(user_id: int, text: str):
    try: 
        await router_weather.send_message(user_id, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def schedule_message(user_id: int, text: str, send_time_utc: datetime):
    scheduler = AsyncIOScheduler()
 
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ UTC)
    trigger = DateTrigger(run_date=send_time_utc)
 
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(send_message_to_user, trigger, args=[user_id, text])
 
    scheduler.start()


async def set_schedule():
    #sort in days and weeks
    users = db.get_all_users_with_time()
    week_users = [user for user in users['alarm_week']]
    day_users = [user for user in users['alarm_day']]
    
        
    text = "–≠—Ç–æ –≤–∞—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    
    utc_now = datetime.now(timezone.utc)
    
    # —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 8 —É—Ç—Ä–∞ 
    day_users['time_zone']  = time_ for time in users['time_zone']
    utc_now == day_users[]
    
    
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    # await schedule_message(user_id, text, send_time_utc)
    # await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async def check_users_newsletter():
    # –ó–¥–µ—Å—å –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = db.get_all_users_with_time()  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–µ–º
    
    current_time = datetime.utcnow().time()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    
    for user in users:
        user_id = user['user_id']
        user_time = user['newsletter_time']  # –í—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_time.hour == user_time.hour and current_time.minute == user_time.minute:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await send_newsletter(user_id, "–í–∞—à–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")